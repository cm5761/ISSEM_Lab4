import threading
import matplotlib.pyplot as plt
import matplotlib.animation as animation

import time
import math
import socket
import fcntl
import os
import errno

import secrets
import string
from datetime import datetime, timedelta

from simpleclient import SimpleClient # importing simpleclient instead of duplicating code
import infinc
import hvac # hashicorp


from setup import * # for testing purposes ONLY

class SmartNetworkThermometer(threading.Thread):
    open_cmds = ["AUTH", "LOGOUT"]
    prot_cmds = ["SET_DEGF", "SET_DEGC", "SET_DEGK", "GET_TEMP", "UPDATE_TEMP"]

    def __init__(self, source, updatePeriod, port):
        threading.Thread.__init__(self, daemon=True)
        self.source = source
        self.updatePeriod = updatePeriod
        self.curTemperature = 0
        self.updateTemperature()
        self.tokens = []
        self.expiration_minutes = 180 # modifiable as appropriate

        self.serverSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)
        self.serverSocket.bind((decrypt_value(encryption_key,os.environ.get('SET_IP')), port))
        fcntl.fcntl(self.serverSocket, fcntl.F_SETFL, os.O_NONBLOCK)

        self.deg = "K"
        self.token_lock = threading.Lock() # Our threading lock for token access
        self.stopped = threading.Event()  # Event to indicate whether the thread should stop

        # hashicorp credentials
        self.url='http://'+decrypt_value(encryption_key,os.environ.get('SET_IP'))+':'+decrypt_value(encryption_key,os.environ.get('SET_PORT'))
        # Retrieve the token from the environment variable
        self.set_token = decrypt_value(encryption_key,os.environ.get('SET_TOKEN'))
        
    def stop(self): # threading stop/set function
        self.stopped.set()

    def setSource(self, source):
        self.source = source

    def setUpdatePeriod(self, updatePeriod):
        self.updatePeriod = updatePeriod

    def setDegreeUnit(self, s):
        self.deg = s
        if self.deg not in ["F", "K", "C"]:
            self.deg = "K"

    def updateTemperature(self):
        self.curTemperature = self.source.getTemperature()

    def getTemperature(self):
        if self.deg == "C":
            return self.curTemperature - 273
        if self.deg == "F":
            return (self.curTemperature - 273) * 9 / 5 + 32

        return self.curTemperature

    def authenticate(self) :
        #Authenticate with Hashicorp Vault
        client = hvac.Client(url=self.url, token=self.set_token,)
        #Read password from Hashicorp Vault
        read_response = client.secrets.kv.v2.read_secret_version(path=decrypt_value(encryption_key,os.environ.get('SET_PATH')),raise_on_deleted_version=True)
        password = decrypt_value(encryption_key,read_response['data']['data']['password'])
        return password

def processCommands(self, msg, addr):
    cmds = msg.split(';')
    for c in cmds:
        cs = c.split(' ')
        if len(cs) == 2:  # should be either AUTH or LOGOUT
            if cs[0] == "AUTH":
                # Reading our secret
                password = self.authenticate()
                if cs[1] == password:
                    with self.token_lock:
                        token = ''.join(secrets.choice(string.ascii_uppercase + string.ascii_lowercase + string.digits) for _ in range(16))
                        expiration_time = datetime.now() + timedelta(minutes=self.expiration_minutes)
                        # Set token expiration time
                        self.tokens[token] = expiration_time
                    self.serverSocket.sendto(encrypt_value(encryption_key,token).encode("utf-8"), addr)
            elif cs[0] == "LOGOUT":
                with self.token_lock: # our lock implemented
                    token = cs[1]
                    if self.tokens.get(token): # using get to prevent keyerrors
                        del self.tokens[token]
            else:  # unknown command
                self.serverSocket.sendto(encrypt_value(encryption_key,"Invalid Command\n").encode("utf-8"), addr)
        elif c == "SET_DEGF":
            self.deg = "F"
        elif c == "SET_DEGC":
            self.deg = "C"
        elif c == "SET_DEGK":
            self.deg = "K"
        elif c == "GET_TEMP":
            self.serverSocket.sendto(encrypt_value(encryption_key,"{}\n".format(self.getTemperature())).encode("utf-8"), addr)
        elif c == "UPDATE_TEMP":
            self.updateTemperature()
        elif c:
            self.serverSocket.sendto(encrypt_value(encryption_key,"Invalid Command\n").encode("utf-8"), addr)

    def run(self):
        MAX_TOKENS = 20  # Maximum number of tokens allowed
        while not self.stopped.is_set(): # help with infinite loop risk and race conditions
            try:
                # Remove expired tokens
                with self.token_lock:
                    current_time = datetime.now()
                    expired_tokens = [token for token, expiration_time in self.tokens.items() if expiration_time <= current_time]
                    for token in expired_tokens:
                        del self.tokens[token]

                msg, addr = self.serverSocket.recvfrom(1024)
                msg = msg.decode("utf-8").strip()
                msg = decrypt_value(encryption_key,msg) #decrypting the received message
                cmds = msg.split(' ')
                if len(cmds) == 1:  # protected commands case
                    semi = msg.find(';')
                    if semi != -1:  # if we found the semicolon
                        with self.token_lock:
                            if msg[:semi] in self.tokens:  # if it's a valid token
                                self.processCommands(msg[semi + 1:], addr)
                            else:
                                self.serverSocket.sendto(encrypt_value(encryption_key,"Bad Token\n").encode("utf-8"), addr)
                    else:
                        self.serverSocket.sendto(encrypt_value(encryption_key,"Bad Command\n").encode("utf-8"), addr)
                elif len(cmds) == 2:
                    if cmds[0] in self.open_cmds:  # if it's AUTH or LOGOUT
                        with self.token_lock:
                            if len(self.tokens) >= MAX_TOKENS: #check if we have reached the maximum number of permitted tokens
                                self.serverSocket.sendto(encrypt_value(encryption_key,"Too many tokens\n").encode("utf-8"), addr)
                            else:
                                self.processCommands(msg, addr)
                    else:
                        self.serverSocket.sendto(encrypt_value(encryption_key,"Authenticate First\n").encode("utf-8"), addr)
                else:
                    self.serverSocket.sendto(encrypt_value(encryption_key,"Bad Command\n").encode("utf-8"), addr)

            except IOError as e:
                if e.errno == errno.EWOULDBLOCK:
                    # do nothing
                    pass
                else:
                    # do nothing for now
                    pass

            self.updateTemperature()
            time.sleep(self.updatePeriod)
            if threading.currentThread().interrupted: # break out of the loop if the thread is interrupted. This check is used as a backup in case the interruption is not handled through the self.stopped event.
                break

# SimpleClient is now imported

UPDATE_PERIOD = .05 #in seconds
SIMULATION_STEP = .1 #in seconds

#create a new instance of IncubatorSimulator
bob = infinc.Human(mass = 8, length = 1.68, temperature = 36 + 273)
#bobThermo = infinc.SmartThermometer(bob, UPDATE_PERIOD)
bobThermo = SmartNetworkThermometer(bob, UPDATE_PERIOD, 23456)
bobThermo.start() #start the thread

inc = infinc.Incubator(width = 1, depth=1, height = 1, temperature = 37 + 273, roomTemperature = 20 + 273)
#incThermo = infinc.SmartNetworkThermometer(inc, UPDATE_PERIOD)
incThermo = SmartNetworkThermometer(inc, UPDATE_PERIOD, 23457)
incThermo.start() #start the thread

incHeater = infinc.SmartHeater(powerOutput = 1500, setTemperature = 45 + 273, thermometer = incThermo, updatePeriod = UPDATE_PERIOD)
inc.setHeater(incHeater)
incHeater.start() #start the thread

sim = infinc.Simulator(infant = bob, incubator = inc, roomTemp = 20 + 273, timeStep = SIMULATION_STEP, sleepTime = SIMULATION_STEP / 10)

sim.start()

sc = SimpleClient(bobThermo, incThermo)

plt.grid()
plt.show()
